#!/usr/bin/env bash
set -euo pipefail

PROJDIR=$(cd $(dirname "$0")/.. && pwd -P)
twtree_src="$PROJDIR"/twtree    # working tree used to init test repo
trepo="$PROJDIR"/.build/trepo   # Test repo/project on which we operate

unindent() { sed -e 's/^        //'; }

# ----------------------------------------------------------------------
echo "───── test-repo setup"
mkdir -p $(dirname "$trepo")
rm -rf "$trepo/"
cp -r "$twtree_src/" "$trepo/"
(   cd "$trepo"
    git init -q
    git add .
    git commit -q -m 'Test repository initial commit'
)

# ----------------------------------------------------------------------
echo "───── git tscript interactive"
(
    expected() { unindent <<_
        ━━━━━━━━━━━━ 10-pass
        output to stdout
        output to stderr
        ━━━━━━━━━━━━ 30-fail
        ━━━━━ FAILED (exitcode=34)
_
    }

    #   Ensure git-tscript finds repo root from subdir.
    cd "$trepo"/empty
    #   Run sample tests "interactively" so that output is not recorded.
    #   This is expected to exit with a failure code after the 30-fail
    #   test; we ignore this because it's difficult to check.
    (git tscript --interactive 2>&1 || true) | diff -u <(expected) - || true
)

# ----------------------------------------------------------------------
echo "───── git tscript capture-to-file (dirty working tree)"
(
    foreground_expected() { unindent <<_
        git-tscript: 10-pass completed (exit=0)
        git-tscript: 30-fail completed (exit=34)
        git-tscript: 40-pass completed (exit=0)
        git-tscript: 60-untracked completed (exit=0)
_
    }

    cd "$trepo"/
    #   A modified working copy, which includes non-ignored untracked files
    #   as well as changes to tracked files, causes git-tscript to capture
    #   to file instead of capture to repo.
    unindent <<_ > "$trepo/tscript/60-untracked"
        #!/usr/bin/env bash
        echo UNTRACKED-STDOUT
        echo 1>&2 UNTRACKED-STDERR
_
    chmod +x "$trepo/tscript/60-untracked"
    buildts="$PROJDIR"/.build/trepo/.build/tscript
    git tscript --foreground 2>&1 | diff -u <(foreground_expected) - || true
    #   check that working copy was copied
   #diff -q -r "$PROJDIR"/trepo/tscript/ "$buildts"/tscript/
    #   check files to ensure they have the right output
    diff -r -u "$PROJDIR"/ts/10-output/ "$buildts"/out
)
