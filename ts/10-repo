#!/usr/bin/env bash
set -euo pipefail

PROJDIR=$(cd $(dirname "$0")/.. && pwd -P)
trepo_src="$PROJDIR"/trepo
trepo_work="$PROJDIR"/.build/trepo

# ----------------------------------------------------------------------
echo "───── test-repo setup"
mkdir -p $(dirname "$trepo_work")
rm -rf "$trepo_work/"
cp -r "$trepo_src/" "$trepo_work/"
(   cd "$trepo_work"
    git init -q
    git add .
    git commit -q -m 'Test repository initial commit'
)

# ----------------------------------------------------------------------
echo "───── git tscript interactive"
(
    expected() { cat <<_____
━━━━━━━━━━━━ 10-pass
output to stdout
output to stderr
━━━━━━━━━━━━ 30-fail
━━━━━ FAILED (exitcode=34)
_____
}
    #   Ensure git-tscript finds repo root from subdir.
    cd "$trepo_work"/empty
    #   Run sample tests "interactively" so that output is not recorded.
    #   This is expected to exit with a failure code after the 30-fail
    #   test; we ignore this because it's difficult to check.
    (git tscript --interactive 2>&1 || true) | diff -u <(expected) - || true
)

# ----------------------------------------------------------------------
echo "───── git tscript capture-to-file"
(   
    foreground_expected() { cat <<_____
git-tscript: 10-pass completed (exit=0)
git-tscript: 30-fail completed (exit=34)
git-tscript: 40-pass completed (exit=0)
git-tscript: 60-untracked completed (exit=0)
_____
}

    cd "$trepo_work"/
    #   A modified working copy, which includes non-ignored untracked files
    #   as well as changes to tracked files, causes git-tscript to capture
    #   to file instead of capture to repo.
    cat <<____ > "$trepo_work/tscript/60-untracked"
#!/usr/bin/env bash
echo UNTRACKED-STDOUT
echo 1>&2 UNTRACKED-STDERR
____
    chmod +x "$trepo_work/tscript/60-untracked"
    git tscript --foreground 2>&1 | diff -u <(foreground_expected) - || true
    #   XXX check files to ensure they have the right output
    diff -r -u "$PROJDIR"/ts/10-output/ \
               "$PROJDIR"/.build/trepo/.build/tscript.out/
)
