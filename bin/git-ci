#!/usr/bin/env bash

set -e
# set -x

git_ci_command="$1" && shift
testset="$1"        && shift

ci_ref_prefix="refs/ci/$testset"

# Utilities
# ---------

notif() { echo "== git ci: $@" ; }
warn()  { notif "$@" >&2       ; }
fatal() { warn "$@" ; exit 1   ; }

clean_worktree_or_die() {
    if ! git diff --quiet; then
        fatal "Must run with a clean worktree!!!"
    fi
}

# Configuration
# -------------

git_ci_config() {
    git config --file='.ci' "$@"
}

git_ci_tracked_files() {
    git_ci_config --get "test.$testset.trackedFiles"
}

# Storing Results
# ---------------

git_ci_add() {
    git add --force $(git_ci_tracked_files)
}

git_ci_commit() {
    local source_commit source_tree ci_ref
    local tested_commit tested_tree tested_commit_parent

    source_commit="$(git rev-parse HEAD)"
    source_tree="$(git rev-parse "$source_commit^{tree}")"
    ci_ref="$ci_ref_prefix/$source_tree"

    tested_tree="$(git write-tree)"

    tested_commit_parent="$(git rev-parse --verify --quiet "$ci_ref")" \
        || tested_commit_parent="$(git commit-tree "$source_tree" -m "ci: init '$testset' on tree '$source_tree'")"
    tested_commit="$(git commit-tree -p "$tested_commit_parent" "$tested_tree" -m "ci: run '$testset' on commit '$source_commit'")"

    git update-ref "$ci_ref" "$tested_commit"
}

# Reading Results
# ---------------

git_ci_get_test_results() {
    local source_commit source_tree
    source_commit="$1" && shift
    source_tree="$(git rev-parse "$source_commit^{tree}")"
    git rev-parse --verify --quiet "$ci_ref_prefix/$source_tree" \
        || return
}

git_ci_last() {
    local source_commit curr_commit max_backtrack
    max_backtrack=50

    { source_commit="$1" && shift ; } || source_commit='HEAD'

    for i in $(seq 0 "$max_backtrack"); do
        curr_commit="$(git rev-parse --verify --quiet "$source_commit~$i")" \
            || break
        if git_ci_get_test_results "$curr_commit" &>/dev/null; then
            echo "$curr_commit"
            return 0
        fi
    done

    echo ''
    warn "No test results found between '$curr_commit..$source_commit'."
}

git_ci_diff() {
    local source_commit_one source_commit_two
    local tested_commit_one tested_commit_two

    source_commit_one="$1" && shift
    source_commit_two="$1" && shift

    tested_commit_two="$(git_ci_get_test_results "$source_commit_two")"
    if [[ "$source_commit_one" == '' ]]; then
        tested_commit_one="$source_commit_two"
    else
        tested_commit_one="$(git_ci_get_test_results "$source_commit_one")"
    fi

    git diff "$tested_commit_one" "$tested_commit_two"
}

git_ci_show() {
    local source_commit_one source_commit_two
    local tested_commit_one tested_commit_two

    { source_commit_one="$1" && shift ; } || source_commit_one='HEAD'
    source_commit_two="$(git_ci_last "$source_commit_one^")"

    git_ci_diff "$source_commit_two" "$source_commit_one"
}

# Running Tests
# -------------

git_ci_cleanup() {
    git reset
    git checkout -- ./
    git clean -dfx
}

git_ci_test() {
    local test_command

    clean_worktree_or_die

    # TODO: record exit codes and report back correct exit code?
    # Perhaps with trailers in commit message? (git interpret-trailers)
    # Otherwise, `git bisect` with `git ci test` will be broken.
    ! git_ci_get_test_results 'HEAD' \
        || { notif "Test results already exist for '$(git rev-parse HEAD)'."
             notif "skipping..."
             return 0
           }

    test_command="$(git_ci_config --get "test.$testset.command")"
    notif "running test '$test_command'"
    exit_status="0"

    git ci cleanup "$testset"
    bash -c "$test_command" || exit_status="$?"
    git ci add     "$testset"
    git ci commit  "$testset"
    git ci cleanup "$testset"

    return "$exit_status"
}

git_ci_run() {
    local curhead exit_status
    local source_commit_one source_commit_two

    { source_commit_one="$1" && shift ; } || source_commit_one="HEAD"
    { source_commit_two="$1" && shift ; } || source_commit_two="$source_commit_one^"

    clean_worktree_or_die

    curhead="$(git rev-parse --abbrev-ref HEAD)"

    exit_status='0'
    for commit_id in $(git rev-list "$source_commit_one" "$source_commit_two"); do
        git checkout "$commit_id"
        git ci test "$testset" || exit_status="$?"
    done

    git checkout "$curhead"
    exit "$exit_status"
}

# Main
# ----

notif "$git_ci_command $testset $@"
case "$git_ci_command" in
    cleanup) git_ci_cleanup    ;;
    test)    git_ci_test       ;;
    add)     git_ci_add        ;;
    commit)  git_ci_commit     ;;
    run)     git_ci_run   "$@" ;;
    show)    git_ci_show  "$@" ;;
    last)    git_ci_last  "$@" ;;
    *)       fatal "Unrecognized command: $git_ci_command" ;;
esac
