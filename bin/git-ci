#!/usr/bin/env bash

SUBDIRECTORY_OK=1
. $(git --exec-path)/git-sh-setup

get_base_dir() {
    (cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/.." && pwd)
}
base="$(get_base_dir)"

log() {
    parsed_revs=$(git rev-parse --default HEAD "$@") || exit

    commit="%C(auto)%h"
    format_good="$commit %Cgreen✓%Creset%C(auto)%d %s"
    format_bad="$commit %C(reverse red)✗%Creset%C(auto)%d %s"
    format_unknown="$commit%Creset %C(auto)?%d %s"

    while read -r rev; do
        test_status=$(git notes --ref=refs/notes/tests/default  show "$rev^{tree}" 2>/dev/null)
        [ $? = 0 ] || test_status=unknown

        format=
        case "$test_status" in
            good)    format="$format_good" ;;
            bad)     format="$format_bad" ;;
            unknown) format="$format_unknown" ;;
        esac

        git --no-pager log --format="$format" -1 $rev
    done < <(git rev-list $parsed_revs) \
        | git_pager
}

create_worktree() {
    # XXX: If there are multiple worktrees, should we use the current one,
    # or the original one?
    cd_to_toplevel

    # XXX: Should we make sure somehow that this is ignored, or use /tmp?
    git worktree add --detach "tmp/ci"
}

run() {
    HEAD=$(git rev-parse HEAD)

    local worktree_gitdir_info_file=$(git rev-parse --git-path worktrees/ci/gitdir)
    [ ! -f "$worktree_gitdir_info_file" ] && create_worktree
    local worktree_gitdir=$(cat "$worktree_gitdir_info_file")
    [ ! -f "$worktree_gitdir" ] && create_worktree

    cd "$(dirname "$worktree_gitdir")"
    require_work_tree_exists || die "XXX: This should not happen"
    require_clean_work_tree "ci run" "Please commit or stash them"

    # Worktree may have been at a different commit from where we were
    # and git-test has strange format requirements.
    git checkout "$HEAD"
    "$base/git-test/bin/git-test" run "$@"
}

action="$1"; shift
case "$action" in
    log) log "$@"                                           ;;
    run) run "$@"                                           ;;
      *) exec "$base/git-test/bin/git-test" "$action" "$@"  ;;
esac

