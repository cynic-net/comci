#!/usr/bin/env bash
set -e

# Usage/Git Setup
# ---------------

USAGE='[help|list|run]'
LONG_USAGE='git ci help
    print this long help message

git ci (l|list)
    list available tests

git ci (r|run) <revision> <test-name>
    run specified test against revision'

OPTIONS_SPEC=

. "$(git --exec-path)/git-sh-setup"

# Utilities
# ---------

die()  { echo "==   fatal: $@"; exit 1 ; }
warn() { echo "== warning: $@"; }

config_branch=ci/config

# Configuration Parsing
# ---------------------

check_config_exists() {
    git show-ref --quiet --verify "refs/heads/$config_branch" \
        || die "Couldn't find branch $config_branch"
    git cat-file -e "$config_branch:config" 2>/dev/null \
        || die "config file doesn't exist on branch $config_branch"
}

parse_config() {
    test_names=()
    test_commands=()
    local old_IFS="$IFS"
    while read test_line; do
        IFS='. '
        test_line=( $test_line )
        [[ "${test_line[0]}" == "test"    ]] || die  "Malformed configuration entry! '${test_line[@]}'"
        [[ "${test_line[2]}" == "command" ]] || warn "Unsupported test option: '${test_line[2]}' (${test_line[@]})"
        test_names+=("${test_line[1]}")
        IFS=' '
        test_commands+=("${test_line[*]:3}")
    done
    IFS="$old_IFS"
}

# List Tests
# ----------

list_tests() {
    check_config_exists
    parse_config < <(git cat-file blob "$config_branch:config" | git config --file=- --get-regexp 'test.*')
    for test in ${test_names[@]}; do echo $test; done
}

# Run Tests
# ---------

run_tests() {
    local revision="$1"  && shift || die "'git ci run' requires a revision and a test-name"
    local test_name="$1" && shift || die "'git ci run' requires a revision and a test-name"
    [[ "$#" == '0' ]]             || die "Too many arguments"
    echo "$revision $test_name"
    exit 1
}

# Main
# ----

[[ "$1" == "--define-functions-only" ]] && return
[[ "$#" == '0' ]] && usage

cmd="$1" && shift
case "$cmd" in
    help)   git ci -h ;;
    l|list) list_tests "$@" ;;
    r|run)  run_tests  "$@" ;;
    *)      usage ;;
esac
