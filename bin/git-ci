#!/usr/bin/env bash

set -e

SUBDIRECTORY_OK=1
. $(git --exec-path)/git-sh-setup

get_base_dir() {
    (cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/.." && pwd)
}
base="$(get_base_dir)"

err() {
    echo >&2 "git ci: $@"
    exit 1
}

for_each_rev() {
    local function=$1; shift
    local rev
    parsed_revs=$(git rev-parse "$@") || exit
    while read -r rev; do $function "$rev"; done \
        < <(git rev-list $parsed_revs) | git_pager
}

do_log() {
    local test_name=default
    [ _-t = _"$1" ] && { test_name="$2"; shift; shift; }
    for_each_rev log_commit --default HEAD "$@"
}

notes() {
    git notes --ref=refs/notes/tests/"$test_name" "$@"
}

test_status() {
    notes 2>/dev/null show "$1^{tree}" || echo 'unknown'
}

log_commit() {
    local rev="$1"
    local format_commit format_good format_bad format_unknown
    format_commit="%C(auto)%h"
    format_good="$format_commit %Cgreen✓%Creset%C(auto)%d %s"
    format_bad="$format_commit %C(reverse red)✗%Creset%C(auto)%d %s"
    format_unknown="$format_commit%Creset %C(auto)?%d %s"

    format=
    case "$(test_status "$rev")" in
        good)    format="$format_good" ;;
        bad)     format="$format_bad" ;;
        unknown) format="$format_unknown" ;;
        *)       err "INTERNAL ERROR: Bad test_status: $test_status"
    esac
    git --no-pager log --format="$format" -1 $rev
}

test_commit() {
    local new_status
    if [[ $(test_status "$rev") == "unknown" ]]; then
        git checkout -q "$rev"
        ( $test_command ) && new_status=good || new_status=bad
        notes add "$rev^{tree}" -m "$new_status"
    fi
    log_commit "$rev"
}

do_test() {
    local test_name=default
    [ _-t = _"$1" ] && { test_name="$2"; shift; shift; }
    local test_command=$(git config --get "test.$test_name.command")
    [[ -n $test_command ]] || err "No test '$test_name'"
    cd_to_toplevel
    for_each_rev test_commit --default HEAD "$@"
}

action="$1"; shift
case "$action" in
    log)    do_log "$@"                                         ;;
    run)    die "use 'git ci test' instead"                     ;;
    test)   do_test "$@"                                         ;;
      *)    exec "$base/git-test/bin/git-test" "$action" "$@"   ;;
esac

